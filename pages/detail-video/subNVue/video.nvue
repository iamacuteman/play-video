<template>
	<view class="bg-dark">
		<video id='video' ref="video" :src="src" poster='/static/demo/6.jpg' :controls="false"
			:show-center-play-btn='false' :show-fullscreen-btn='false' :show-progress='false'
			:enable-progress-gesture='false' style="width: 750rpx;height: 225px;" @fullscreenchange='fullscreenchange'
			@timeupdate='timeupdate' @play='isplay = true' @pause='isplay = false'>

			<view class="position-absolute flex align-center justify-center" :style="videoBox">
				<!-- 蒙版(代替视频组件接收触摸或点击事件) -->
				<view class="position-absolute left-0 right-0 top-0 bottom-0" @touchstart='touchStart'
					@touchmove="touchMove" @touchend="touchEnd"></view>
					
				<!-- 侧边 锁屏图标-->
				<view v-if="fullScreenStatus && (showStatusBarStatus||lockScreenStatus)" class="position-absolute top-0 right-0 bottom-0 flex align-center justify-center" style="width:100px;">
					<view class="rounded flex align-center justify-center" 
					style="width:60px;height: 60px;background-color: rgbc(0,0,0,0.4);"
					@click="lockScreen"
					>
						<text class="iconfont" :class="lockScreenStatus?'text-main':'text-white'">&#xe620;</text>
					</view>
				</view>
				<!-- 提示框 -->
				<view v-if="showToastStatus" class="p-2 rounded" style="background-color: rgba(0,0,0,0.3);">
					<text v-if="toast.type === 'progress'"
						class="font text-white">{{currentTime|formatTime}}/{{duration|formatTime}}</text>
					<text v-if="toast.type === 'msg'" class="font text-white">{{toast.msg}}</text>
				</view>

				<!-- 全屏 控制条 -->
				<!-- 顶部 -->
				<view v-if="showStatusBarStatus && fullScreenStatus" class="flex justify-between align-center 
				video-bg-top  position-absolute top-0 left-0 right-0" style="height: 44px;">
					<view class="flex align-center">
						<!-- 箭头 -->
						<view class="flex align-center">
							<f-icon-btn :icon="'\ue612'" @click='fullOrExitScreen'></f-icon-btn>
						</view>
						<!-- 标题 -->
						<view class="flex align-center px-2">
							<text class="text-white" style="font-size: 15px;lines: 1;">视频标题</text>
						</view>
					</view>
					<view class="flex align-center">
						<f-icon-btn :icon="'\ue612'" @click='fullOrExitScreen'></f-icon-btn>
					</view>
				</view>
				<!-- 底部控制条 -->
				<view v-if="showStatusBarStatus &&fullScreenStatus"
					class="position-absolute bottom-0 left-0 right-0 video-bg-bottom" style="height: 88px;">
					<view style="height: 88px;">
						<!-- 进度条 -->
						<view class="flex-1" style="padding-left: 40px;padding-right: 40px;">
							<f-slider :duration="duration" :currentTime="currentTime" @change='sliderChange'
								@update="sliderUpdate">
							</f-slider>
						</view>
						<!-- 进度条 下面按钮-->
						<view class="flex align-stretch justify-between"
							style="height: 44px;padding-left: 30px;padding-right: 30px;">
							<view class="flex">
								<!-- 播放按钮 -->
								<f-icon-btn v-if="!isplay" :icon="'\ue63a'" :size="22" @click='playOrPause'>
								</f-icon-btn>
								<f-icon-btn v-else :icon="'\ue605'" :size="22" @click='playOrPause'></f-icon-btn>
								<!-- 时间 -->
								<view class="flex align-center justify-center" style="width: 80px;">
									<text
										class="font-sm text-white">{{currentTime|formatTime}}/{{duration|formatTime}}</text>
								</view>
								<!-- 弹幕按钮 -->
								<f-icon-btn :icon="'\ue697'" :size="22"></f-icon-btn>
							</view>
							<view class="flex">
								<view class="flex align-center" @click="openDrawer('speed')"
									style="height: 44px;padding-left: 15px;padding-right: 15px;">
									<text class="text-white" style="font-size: 15px;">{{rate}}</text>
								</view>
								<view class="flex align-center" @click="openDrawer('quality')"
									style="height: 44px;padding-left: 15px;padding-right: 15px;">
									<text class="text-white" style="font-size: 15px;">{{quality|formatQuality}}</text>
								</view>
								<view class="flex align-center" @click="openDrawer('video')"
									style="height: 44px;padding-left: 15px;padding-right: 15px;">
									<text class="text-white" style="font-size: 15px;">选集</text>
								</view>
							</view>
						</view>
					</view>
				</view>

				<!-- 弹框 -->
				<view v-if="showDrawer" class="position-absolute top-0 right-0 bottom-0 flex flex-column"
					style="background-color: rgba(0,0,0,0.8);">
					<!-- 速度 -->
					<view v-if="drawerType === 'speed'" class="flex-1 flex flex-column" style="width: 100px;">
						<view class="flex-1 flex align-center justify-center" v-for="(item,index) in rateList"
							:key="index" @click="changeRate(item)">
							<text :class="item === rate?'text-main':'text-white'">{{item}}</text>
						</view>
					</view>
					
					<!-- 选集 -->
					<view v-else-if="drawerType === 'video'" class="flex-1 flex flex-column" style="width: 300px;">
						<scroll-view scroll-y="true" class="flex-1 p-2" >
							<view class="border p-2 flex rounded mb-2" v-for="(item,index) in videoList"
							@click="changeVideo(item,index)"
							>
								<text :class="videoIndex === index?'text-main':'text-white'" style="font-size: 14px;lines: unset;">{{item.title}}</text>
							</view>
						</scroll-view>
					</view>
					
					<!-- 清晰度 -->
					<view v-else class="flex-1 flex flex-column" style="width: 100px;">
						<view class="flex-1 flex align-center justify-center" v-for="(item,index) in qualityList"
							:key="index" @click="changeQuality(item)">
							<text :class="item.value === quality?'text-main':'text-white'">{{item.name}}</text>
						</view>
					</view>
				</view>
			</view>
		</video>

		<!-- 非全屏 控制条 -->
		<!-- 顶部(左箭头)-->
		<view v-if="showStatusBarStatus && !fullScreenStatus"
			class="video-bg-top bg-dark position-fixed top-0 left-0 right-0">
			<view class="" :style="'height:'+statusBarHeight+'px'"></view>
			<view style="height: 44px;" class="flex align-center">
				<f-icon-btn :icon="'\ue612'" @click='back'></f-icon-btn>
			</view>
		</view>
		<!-- 底部控制条 -->
		<view v-if="showStatusBarStatus &&!fullScreenStatus"
			class="position-fixed bottom-0 left-0 right-0 video-bg-bottom">
			<view class="flex align-stretch" style="44px">
				<!-- 播放按钮 -->
				<f-icon-btn v-if="!isplay" :icon="'\ue63a'" :size="22" @click='playOrPause'></f-icon-btn>
				<f-icon-btn v-else :icon="'\ue605'" :size="22" @click='playOrPause'></f-icon-btn>
				<!-- 进度条 -->
				<view class="flex-1">
					<f-slider :duration="duration" :currentTime="currentTime" @change='sliderChange'
						@update="sliderUpdate"></f-slider>
				</view>
				<!-- 时间 -->
				<view class="flex align-center justify-center" style="width: 80px;">
					<text class="font-sm text-white">{{currentTime|formatTime}}/{{duration|formatTime}}</text>
				</view>
				<f-icon-btn :icon="'\ue800'" :size="22" @click="fullOrExitScreen"></f-icon-btn>
			</view>
		</view>
	</view>
</template>

<script>
	const d = weex.requireModule('dom');
	let videoCTX = null;
	let showToastTimer = null;
	let timer = null;
	import fIconBtn from './components/f-icon-btn.vue';
	import fSlider from './components/f-slider.vue';

	const demoList = [{
			index: 0,
			title: '优化空数据默认显示',
			list: [{
					name: "标清",
					value: "SD",
					url: "https://v-cdn.zjol.com.cn/280443.mp4"
				},
				{
					name: "高清",
					value: "HD",
					url: "https://v-cdn.zjol.com.cn/276985.mp4"
				}
			]
		},
		{
			index: 1,
			title: '海马',
			list: [{
					name: "标清",
					value: "SD",
					url: "https://v-cdn.zjol.com.cn/276982.mp4"
				},
				{
					name: "高清",
					value: "HD",
					url: "https://v-cdn.zjol.com.cn/276984.mp4"
				}
			]
		}
	]
	export default {
		provide() {
			return {
				v: this
			}
		},
		components: {
			fIconBtn,
			fSlider
		},
		data() {
			return {
				src: 'https://v-cdn.zjol.com.cn/280443.mp4',
				isplay: false, //是否播放
				statusBarHeight: 0,
				currentTime: 0, //当前时间点
				duration: 0, //视频总时长
				windowHeight: 0, //屏幕高
				windowWidth: 0, //屏幕宽

				fullScreenStatus: false, //全屏状态,false(坚屏),true（全屏）

				showToastStatus: false, //时间框显示状态

				toast: {
					type: "msg",
					msg: "提示"
				},

				showStatusBarStatus: true, //底部控制条的显示状态

				oldTouchs: {}, //旧的触摸返回对象
				oldValue: {},
				dbCount: 0, //点击蒙版的次数
				touchType: null,
				platform: '', //当前所在平台

				showDrawer: false, //弹窗的显示隐藏状态
				drawerType: "speed", //弹窗的类型（倍速、清晰度、选集）
				rate: "1.0", //当前播放速度
				rateList: ['2.0', '1.5', '1.25', '1.0', '0.8', '0.5'], //速度选择

				videoIndex: 0, //当前播放的视频
				videoList: [],//可选视频列表
				quality:'HD',//画质
				
				lockScreenStatus:false,//锁屏状态
			}
		},
		created() {
			let res = uni.getSystemInfoSync();
			this.statusBarHeight = res.statusBarHeight;
			this.windowHeight = res.windowHeight //屏幕高度
			this.windowWidth = res.windowWidth //屏幕宽度
			this.platform = res.platform;
			// 引入图标
			d.addRule('fontFace', {
				'fontFamily': "iconfont",
				'src': "url('https://at.alicdn.com/t/font_1419176_mzo8rsjxi4c.ttf')"
			});

			this.videoList = demoList;

		},
		mounted() {
			videoCTX = this.$refs.video;
		},
		computed: {
			videoBox() {
				return this.fullScreenStatus ? `width:${this.windowHeight}px;height:${this.windowWidth}px` :
					`width:750rpx;height:225px;`
			},
			modalStyle() {
				let top = this.statusBarHeight + 44
				return `top:${top}px;bottom:44px;`
			},
			//视频画质数组
			qualityList(){
				return this.videoList[this.videoIndex]?this.videoList[this.videoIndex].list:[]
			}
		},
		methods: {
			//锁屏或解除锁屏
			lockScreen(){
				this.lockScreenStatus = !this.lockScreenStatus;
				if(this.lockScreenStatus){
					this.hideStatusBar()
				}else{
					this.showStatusBar()
				}
			},
			//选择清晰度
			changeQuality(item){
				videoCTX.stop();
				if(!item.url){
					return uni.showToast({
						title:'视频链接不存在',
						icon:'none'
					})
				}
				this.src = item.url;
				this.quality = item.value;
				uni.showToast({
					title:'清晰度:'+item.name,
					icon:'none'
				})
				setTimeout(()=>{
					videoCTX.play()
				},300)
			},
			//选集
			changeVideo(item,index){
				this.videoIndex = index;
				videoCTX.stop();
				let list = this.videoList[index].list;
				let i = list.findIndex(v=>v.value === this.quality);
				if(i === -1){//没找到高清
					if(list.length>0){
						this.src = list[0].url
					}else{
						return uni.showToast({
							title:'视频链接不存在',
							icon:'none'
						})
					}
				}else{//有高清
					this.src = list[i].url;
				}
				
				uni.showToast({
					title:'切换到:'+item.title,
					icon:'none'
				})
				
				setTimeout(()=>{
					videoCTX.seek(0)//进度归0
					videoCTX.play()
				},300)
				
				this.showDrawer = false;
				
			},
			//修改播放速度
			changeRate(item) {
				this.rate = item;
				videoCTX.playbackRate(this.rate); //playbackRate是官方修改速度API
				uni.showToast({
					title: '当前速度修改为' + this.rate,
					icon: 'none'
				})
				this.showDrawer = false;
			},
			openDrawer(type) {
				this.drawerType = type;
				this.showDrawer = true;
			},
			//进入全屏、退出全屏
			fullOrExitScreen() {
				if (this.fullScreenStatus) {
					videoCTX.exitFullScreen() //退出全屏
				} else {
					videoCTX.requestFullScreen()
				}
			},
			//显示或隐藏控制条
			showOrHideStatusBar() {
				this.showStatusBarStatus ? this.hideStatusBar() : this.showStatusBar()
			},
			//显示控制条
			showStatusBar() {
				this.showStatusBarStatus = true;
				timer = timer ? clearTimeout(timer) : null;
				let timer = setTimeout(() => {
					this.hideStatusBar()
					timer = null;
				}, 3000)
			},
			//隐藏控制条
			hideStatusBar() {
				this.showStatusBarStatus = false;
			},
			back() {
				uni.navigateBack({
					delta: 1
				});
			},
			//播放和暂停
			playOrPause() {
				this.showToast({
					msg: this.isplay ? '暂停' : '播放',
					autoClose: true
				})
				if (this.isplay) {
					videoCTX.pause()
				} else {
					this.showStatusBar()
					videoCTX.play()
				}
			},
			//全屏变化时
			fullscreenchange(e) {
				this.fullScreenStatus = e.detail.fullScreen //进入全屏时，把全屏状态保存下来
			},
			//监听时间进度
			timeupdate(e) {
				if (!this.showToastStatus) { //时间框没出来时，才通过这里获得当前时间
					this.currentTime = parseInt(e.detail.currentTime); //获得当前时间
				}
				this.duration = parseInt(e.detail.duration); //获得总时长
			},
			//进度条变化
			sliderChange(e) { //拖动进度条结束时
				videoCTX.seek(e) //视频跳转到某个时间
				this.showToastStatus = false;
				videoCTX.play()
			},
			sliderUpdate(e) { //拖动进度条过程中
				this.showStatusBar()
				videoCTX.pause();
				this.showToastStatus = true;
				this.currentTime = e;
				this.showToast({
					type: 'progress',
					autoClose: false
				})

			},

			showToast(options) {
				this.toast.type = options.type || 'msg'
				this.toast.msg = options.msg || '提示'
				this.showToastStatus = true;

				if (options.autoClose !== false) { //autoClose代表是否自动关闭提示框（拖动时不应该自动关闭）
					if (showToastTimer) clearTimeout(showToastTimer)
					showToastTimer = setTimeout(() => {
						this.showToastStatus = false;
						showToastTimer = null
					}, 500)
				}
			},
			//开始触摸蒙版
			touchStart(e) {
				this.oldTouchs = e.changedTouches[0]; //旧坐标
				this.oldValue = {
					currentTime: this.currentTime //保存旧的时间
				}
			},
			//在蒙版上移动
			touchMove(e) {
				if(this.lockScreenStatus) return //如果处于锁屏状，直接不走下面
				let newTouchs = e.changedTouches[0]; //新坐标
				if (!this.touchType) {
					this.touchType = Math.abs(newTouchs.pageX - this.oldTouchs.pageX) > 20 ? 'currentTime' :
						null //拖动距离大于20，就进入拖动进度条模式
					if (this.fullScreenStatus && this.platform === 'ios') { //处于全屏状态
						this.touchType = Math.abs(newTouchs.pageY - this.oldTouchs.pageY) > 20 ? 'currentTime' :
							null //拖动距离大于20，就进入拖动进度条模式
					}
					if (this.touchType === 'currentTime') {
						videoCTX.pause()
					}
				} else if (this.touchType === 'currentTime') { //拖拽过程中
					this.showToast({
						type: 'progress',
						autoClose: false
					})
					this.showStatusBar()
					let newCurrentTime = (newTouchs.pageX - this.oldTouchs.pageX) / 250 * this.duration * 2 + this.oldValue
						.currentTime * 1;
					if (this.fullScreenStatus && this.platform === 'ios') {
						newCurrentTime = (newTouchs.pageY - this.oldTouchs.pageY) / 250 * this.duration * 2 + this.oldValue
							.currentTime * 1;
					}
					newCurrentTime = newCurrentTime > this.duration ? this.duration : newCurrentTime;
					newCurrentTime = newCurrentTime < 0 ? 0 : newCurrentTime;
					this.currentTime = newCurrentTime;
				}
			},
			//结束触摸蒙版
			touchEnd(e) {
				if(this.lockScreenStatus) return //如果处于锁屏状，直接不走下面
				if (this.touchType === 'currentTime') { //处于拖动模式
					videoCTX.seek(this.currentTime) //视频跳转到某个时间
					videoCTX.play()

				} else { //处于点击模式
					if (this.dbCount === 1 || this.dbCount === 0) {
						this.dbCount++
					}
					if (this.dbCount > 0) {
						setTimeout(() => {
							if (this.dbCount === 1) { //单击
								this.showOrHideStatusBar() //隐藏进度条
								this.showDrawer = false; //隐藏抽屉弹窗
							}
							if (this.dbCount === 2) { //双击
								this.playOrPause()
							}
							this.dbCount = 0;
						}, 250)
					}
				}
				this.touchType = null; //拖拽完毕，重置状态
				this.showToastStatus = false;
			}
		},
		filters: {
			formatTime(result) {
				var h = Math.floor(result / 3600) < 10 ? '0' + Math.floor(result / 3600) : Math.floor(result / 3600);
				var m = Math.floor((result / 60 % 60)) < 10 ? '0' + Math.floor((result / 60 % 60)) : Math.floor((result /
					60 % 60));
				var s = Math.floor((result % 60)) < 10 ? '0' + Math.floor((result % 60)) : Math.floor((result % 60));
				return result = result > 3600 ? (h + ":" + m + ":" + s) : m + ":" + s;
			},
			formatQuality(val) {
				let arr = {
					SD: "标清",
					HD: "高清",
					FHD: "超清"
				}
				return arr[val]
			}
		},
	}
</script>

<style>
	/* 渐变色 */
	.video-bg-top {
		background-image: linear-gradient(to top, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.5));
	}

	.video-bg-bottom {
		background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.5));
	}
</style>
